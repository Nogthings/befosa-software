// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER")
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Livestock Management Models
model Client {
  id               String            @id @default(cuid())
  name             String
  email            String?           @unique
  phone            String?
  address          String?
  livestockEntries LivestockEntry[]
  livestockExits   LivestockExit[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model LivestockEntry {
  id          String                  @id @default(cuid())
  invoiceNo   String                  @unique
  date        DateTime
  clientId    String
  client      Client                  @relation(fields: [clientId], references: [id])
  totalAmount Decimal                 @db.Decimal(10, 2)
  details     LivestockEntryDetail[]
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
}

model LivestockEntryDetail {
  id               String         @id @default(cuid())
  livestockEntryId String
  livestockEntry   LivestockEntry @relation(fields: [livestockEntryId], references: [id], onDelete: Cascade)
  animalType       String         // "cattle", "pig", "sheep", etc.
  breed            String?
  quantity         Int
  weight           Decimal?       @db.Decimal(8, 2)
  unitPrice        Decimal        @db.Decimal(10, 2)
  totalPrice       Decimal        @db.Decimal(10, 2)
  notes            String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model LivestockExit {
  id          String                 @id @default(cuid())
  invoiceNo   String                 @unique
  date        DateTime
  clientId    String
  client      Client                 @relation(fields: [clientId], references: [id])
  totalAmount Decimal                @db.Decimal(10, 2)
  details     LivestockExitDetail[]
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
}

model LivestockExitDetail {
  id              String        @id @default(cuid())
  livestockExitId String
  livestockExit   LivestockExit @relation(fields: [livestockExitId], references: [id], onDelete: Cascade)
  animalType      String        // "cattle", "pig", "sheep", etc.
  breed           String?
  quantity        Int
  weight          Decimal?      @db.Decimal(8, 2)
  unitPrice       Decimal       @db.Decimal(10, 2)
  totalPrice      Decimal       @db.Decimal(10, 2)
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// Current livestock inventory (calculated from entries - exits)
model LivestockInventory {
  id         String   @id @default(cuid())
  animalType String
  breed      String?
  quantity   Int
  totalWeight Decimal? @db.Decimal(10, 2)
  lastUpdated DateTime @default(now())
  
  @@unique([animalType, breed])
}
