// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Required for NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
}

// Application-specific models
model Client {
  id          String   @id @default(cuid())
  name        String
  phone       String?
  city        String?
  rfc         String?
  curp        String?
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  entries     LivestockEntry[]
  exits       LivestockExit[]
}

enum AnimalStatus {
  IN_STOCK
  SOLD
}

model Animal {
  id              String      @id @default(cuid())
  tag             String      @unique // e.g., an ear tag
  species         String
  weight          Float
  purchasePrice   Float
  purchaseDate    DateTime
  status          AnimalStatus @default(IN_STOCK)
  pen             String?      // Corral

  entryDetail     LivestockEntryDetail?
  exitDetail      LivestockExitDetail?

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model LivestockEntry {
  id              String      @id @default(cuid())
  invoiceNumber   String?
  guideNumber     String?
  entryFolio      String      @unique
  observations    String?
  date            DateTime    @default(now())

  clientId        String
  client          Client      @relation(fields: [clientId], references: [id])

  details         LivestockEntryDetail[]

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model LivestockEntryDetail {
  id              String      @id @default(cuid())

  entryId         String
  entry           LivestockEntry @relation(fields: [entryId], references: [id])

  animalId        String      @unique
  animal          Animal      @relation(fields: [animalId], references: [id])

  weight          Float
  price           Float

  @@unique([entryId, animalId])
}

model LivestockExit {
  id              String      @id @default(cuid())
  invoiceNumber   String?
  guideNumber     String?
  exitFolio       String      @unique
  observations    String?
  date            DateTime    @default(now())

  clientId        String
  client          Client      @relation(fields: [clientId], references: [id])

  details         LivestockExitDetail[]

  totalProfit     Float       @default(0)

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model LivestockExitDetail {
  id              String      @id @default(cuid())

  exitId          String
  exit            LivestockExit @relation(fields: [exitId], references: [id])

  animalId        String      @unique
  animal          Animal      @relation(fields: [animalId], references: [id])

  weight          Float
  price           Float
  profit          Float

  @@unique([exitId, animalId])
}
